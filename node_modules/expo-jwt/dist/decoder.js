'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _encBase = require('crypto-js/enc-base64');

var _encBase2 = _interopRequireDefault(_encBase);

var _encUtf = require('crypto-js/enc-utf8');

var _encUtf2 = _interopRequireDefault(_encUtf);

var _verifier = require('./verifier');

var _verifier2 = _interopRequireDefault(_verifier);

var _errors = require('./errors');

var Errors = _interopRequireWildcard(_errors);

var _algorithms = require('./algorithms');

var _algorithms2 = _interopRequireDefault(_algorithms);

var _helpers = require('./helpers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _key = void 0;

var parse = function parse(encodedString) {
  return JSON.parse(_encBase2.default.parse(encodedString).toString(_encUtf2.default));
};

var sign = function sign(body, algorithm) {
  return (0, _helpers.urlEncodeBase64)(algorithm(body, _key).toString(_encBase2.default));
};

var Decoder = function () {
  function Decoder(key) {
    _classCallCheck(this, Decoder);

    _key = key;
  }

  _createClass(Decoder, [{
    key: 'getAlgorithm',
    value: function getAlgorithm() {
      var algorithm = this._header && this._header.alg;

      if (!algorithm) {
        throw new Errors.AlgorithmMissing();
      }

      if (algorithm === 'none') {
        return 'none';
      }

      if (!~_algorithms.supportedAlgorithms.indexOf(algorithm)) {
        throw new Errors.AlgorithmNotSupported();
      }

      return _algorithms2.default[algorithm];
    }
  }, {
    key: 'verifySignature',
    value: function verifySignature(encodedHeader, encodedBody) {
      if (this.algorithm === 'none') {
        return true;
      }

      var signatureBody = encodedHeader + '.' + encodedBody;

      if (this.signature !== sign(signatureBody, this.algorithm)) {
        throw new Errors.SignatureInvalid();
      }

      return true;
    }
  }, {
    key: 'verifyClaims',
    value: function verifyClaims() {
      _verifier2.default.verifyAll(this._body, this.options);
    }
  }, {
    key: 'decodeAndVerify',
    value: function decodeAndVerify(token) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _token$toString$split = token.toString().split('.'),
          _token$toString$split2 = _slicedToArray(_token$toString$split, 3),
          encodedHeader = _token$toString$split2[0],
          encodedBody = _token$toString$split2[1],
          signature = _token$toString$split2[2];

      if (!encodedHeader || !encodedBody) {
        throw new Errors.InvalidStructure();
      }

      this.options = options;
      this.header = encodedHeader;
      this.body = encodedBody;
      this.signature = signature;
      this.algorithm = this.getAlgorithm();

      this.verifySignature(encodedHeader, encodedBody);
      this.verifyClaims();

      return this._body;
    }
  }, {
    key: 'header',
    set: function set(header) {
      try {
        this._header = parse(header);
      } catch (error) {
        throw new Errors.InvalidHeader();
      }
    }
  }, {
    key: 'body',
    set: function set(body) {
      try {
        this._body = parse(body);
      } catch (error) {
        throw new Errors.InvalidBody();
      }
    }
  }]);

  return Decoder;
}();

exports.default = Decoder;